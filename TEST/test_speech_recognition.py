import os
import speech_recognition as srt
import moviepy.editor as mp
import librosa
import numpy as np
import soundfile as sf

# clip = mp.VideoFileClip("sample_audio/test.mp4")
clip = mp.AudioFileClip("sample_audio/temp.ogg")
clip.write_audiofile("sample_audio/test.wav",codec='pcm_s16le')

audio_dir = r'sample_audio'
out_dir = r'sample_audio'
audio_file = os.path.join(audio_dir, 'test.wav')
wave, sr = librosa.load(audio_file, sr=None)  

segment_dur_secs = 5
segment_length = sr * segment_dur_secs

num_sections = int(np.ceil(len(wave) / segment_length))
split = []

for i in range(num_sections):
    t = wave[i * segment_length: (i + 1) * segment_length]
    split.append(t)

for i in range(num_sections):
    recording_name = os.path.basename(audio_file[:-4])
    out_file = f"{recording_name}_{str(i)}.wav"
    sf.write(os.path.join(out_dir, out_file), split[i], sr)

recognizer = srt.Recognizer()

res = ""
for i in range(0, num_sections):
    with srt.AudioFile(f"sample_audio/test_{str(i)}.wav") as source:
        audio_data = recognizer.record(source)
        text = recognizer.recognize_google(audio_data, language = "es-MX")
        res += text
        print(i, text)
# print(res) 

# import base64
# import re

# def decode_base64(data, altchars='+/'):
#     data = re.sub('[^a-zA-Z0-9%s]+' % altchars, '', data)  # normalize
#     missing_padding = len(data) % 4
#     if missing_padding:
#         data += '='* (4 - missing_padding)
#     return base64.b64decode(data, altchars)
# str1 = ""
# # str1 += "=" * ((4 - len(str1) % 4) % 4)
# decode_str = decode_base64(str1)
# print(decode_str)